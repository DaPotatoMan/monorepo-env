import fs from 'node:fs'
import process from 'node:process'
import { loadEnv } from 'vite'
import { monorepoRootSync } from 'monorepo-root'
import { prepareDir, resolvePath } from './utils'

type EnvMap = Record<string, string | boolean>

export interface EnvGeneratorConfig {
  /** Current project path */
  cwd?: string

  /** Monorepo project root path */
  root?: string
}

function generateTypes(mode: string, env: EnvMap) {
  const dtsEnvMap = Object.entries(env)
    .map(([key, value]) => `  readonly ${key}: ${JSON.stringify(value)}`)
    .join('\n')

  const content = `
// Generated by monorepo-env-merger
// mode = ${mode}

/// <reference types="vite/client" />

interface ImportMetaEnv {
${dtsEnvMap}
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
`

  return content.trim()
}

/** Generates .env file content */
function getEnvContent(mode: string, data: EnvMap) {
  let content = `# Generated by monorepo-env-merger\n# mode = ${mode}\n`

  for (const key in data)
    content += `\n${key}=${data[key]}`

  return content
}

export function generateENV(mode: string, {
  cwd = process.cwd(),
  root = monorepoRootSync(),

  /** Folder where env files will be generated */
  dir = 'node_modules/.env',

  dts = true,
} = {}) {
  if (!root)
    throw new Error('projectRoot not defined')

  const envDir = resolvePath(dir)
  const envPath = resolvePath(envDir, '.env')
  const dtsPath = resolvePath(envDir, 'vite-env.d.ts')

  const env = {
    // Root
    ...loadEnv(mode, root),

    // Local
    ...loadEnv(mode, cwd),
  }

  const envString = getEnvContent(mode, env)
  const dtsContent = generateTypes(mode, env)

  prepareDir(envDir)
  fs.writeFileSync(envPath, envString)
  if (dts)
    fs.writeFileSync(dtsPath, dtsContent)

  return { env, envDir, envPath, dtsPath, dtsContent }
}
